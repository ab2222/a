import csv

def readgraph(gfile):
    graph = csv.reader(open(gfile, "rt"))
    garray = list(graph)
    return garray    

def readheuristic(hfile):
    heu = csv.reader(open(hfile,"rt"))
    H = list(heu)
    return H

def findchildren(Node):
    global g
    child = []
    for i in range(len(g)-1):
        if Node == g[i][0]:
                child.append(g[i][1])
    return child

def calculate_prev_fn(X,P):
    P.append(X)
    prevfn = 0
    if P == []:
        return(0)
    else:
        for i in range (len(P)-1):
            for j in range(len(g)-1):
                if P[i] == g[j][0] and P[i+1] == g[j][1]:
                    prevfn = prevfn + int(g[j][2])
    return(prevfn)

def cal_old_val(X,Y):
        L = []
        for c in range(len(X)):
                L.append(X[c])
        L.append(Y)
        
        oldval = 0
        if L ==[]:
                return (0)
        else:
                for i in range(len(L)-1):
                        for j in range(len(g)-1):
                                if L[i] == g[j][0] and L[i+1] == g[j][1]:
                                        oldval = oldval + int(g[j][2])
        
        return(oldval)
                                        

def list_of_nodes(g):
    nodes = [] 
    j=0
    for i in range(len(g)):
        if g[i][0] not in nodes:
            nodes.append(g[i][0])
            j=j+1
    
def cal_total(k,val):
        for i in range(len(h)):
                if h[i][0] == k:
                        total = val + int(h[i][1])
                        return(total)

visited = []
path = []
filegraph = "OneDrive\Desktop\graph.csv"
g = readgraph(filegraph)
hfile = "OneDrive\Desktop\heuristic.csv"
h = readheuristic(hfile)
print(h)
start = input("Enter the starting Node")
goal = input("Enter the Goal Node")

path.append(start)
nodes = list_of_nodes(g)
for i in path:
        if i == goal:
                print(path)
                break
        else:
                current = findchildren(i)
                hn_all_children = []
                for k in current:
                        if k not in path:
                                val = cal_old_val(path,k)
                                total = cal_total(k,val)
                                hn_all_children.append([k,total])
                val1 = []
                mini_node=" "
                for a in range(len(hn_all_children)):
                        val1.append(hn_all_children[a][1])
                        minimum = min(val1)
                for b in range(len(hn_all_children)):
                        if hn_all_children[b][1] == minimum:
                                mini_node = hn_all_children[b][0]
                                break
                if mini_node not in path:
                        path.append(mini_node)
                print(path)
